package com.cn.goldenjobs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table HISTORY.
*/
public class HistoryDao extends AbstractDao<History, Long> {

    public static final String TABLENAME = "HISTORY";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property MsgTime = new Property(2, Long.class, "msgTime", false, "MSG_TIME");
        public final static Property MsgBody = new Property(3, String.class, "msgBody", false, "MSG_BODY");
        public final static Property MsgType = new Property(4, Integer.class, "msgType", false, "MSG_TYPE");
        public final static Property GroupId = new Property(5, Integer.class, "groupId", false, "GROUP_ID");
        public final static Property MsgFrom = new Property(6, String.class, "msgFrom", false, "MSG_FROM");
        public final static Property MsgStatus = new Property(7, Integer.class, "msgStatus", false, "MSG_STATUS");
        public final static Property IsAcked = new Property(8, Boolean.class, "isAcked", false, "IS_ACKED");
        public final static Property IsDelivered = new Property(9, Boolean.class, "isDelivered", false, "IS_DELIVERED");
        public final static Property MsgToken = new Property(10, String.class, "msgToken", false, "MSG_TOKEN");
    };


    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MSG_ID' TEXT," + // 1: msgId
                "'MSG_TIME' INTEGER," + // 2: msgTime
                "'MSG_BODY' TEXT," + // 3: msgBody
                "'MSG_TYPE' INTEGER," + // 4: msgType
                "'GROUP_ID' INTEGER," + // 5: groupId
                "'MSG_FROM' TEXT," + // 6: msgFrom
                "'MSG_STATUS' INTEGER," + // 7: msgStatus
                "'IS_ACKED' INTEGER," + // 8: isAcked
                "'IS_DELIVERED' INTEGER," + // 9: isDelivered
                "'MSG_TOKEN' TEXT);"); // 10: msgToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, History entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(2, msgId);
        }
 
        Long msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindLong(3, msgTime);
        }
 
        String msgBody = entity.getMsgBody();
        if (msgBody != null) {
            stmt.bindString(4, msgBody);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(5, msgType);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(6, groupId);
        }
 
        String msgFrom = entity.getMsgFrom();
        if (msgFrom != null) {
            stmt.bindString(7, msgFrom);
        }
 
        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null) {
            stmt.bindLong(8, msgStatus);
        }
 
        Boolean isAcked = entity.getIsAcked();
        if (isAcked != null) {
            stmt.bindLong(9, isAcked ? 1l: 0l);
        }
 
        Boolean isDelivered = entity.getIsDelivered();
        if (isDelivered != null) {
            stmt.bindLong(10, isDelivered ? 1l: 0l);
        }
 
        String msgToken = entity.getMsgToken();
        if (msgToken != null) {
            stmt.bindString(11, msgToken);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // msgTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgBody
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // msgType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // groupId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // msgFrom
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // msgStatus
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isAcked
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isDelivered
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // msgToken
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMsgBody(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGroupId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMsgFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMsgStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsAcked(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsDelivered(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setMsgToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(History entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(History entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
